/**/

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the Dataset
# Replace with your data file or use a sample dataset
data = {
    'CustomerID': [1, 2, 3, 4, 5],
    'Age': [25, 34, 45, 23, 40],
    'Income': [40000, 50000, 80000, 35000, 75000],
    'SpendingScore': [60, 70, 50, 90, 30]
}
df = pd.DataFrame(data)

# Step 2: Data Preprocessing
features = ['Age', 'Income', 'SpendingScore']  # Select features for segmentation
X = df[features]

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 3: Determine Optimal Number of Clusters Using Elbow Method
inertia = []
k_values = range(1, 11)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot Elbow Curve
plt.figure(figsize=(8, 5))
plt.plot(k_values, inertia, marker='o', linestyle='--')
plt.title('Elbow Method to Determine Optimal Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()

# Step 4: Apply K-Means Clustering
optimal_k = 3  # Set optimal clusters based on elbow curve
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Step 5: Analyze Clusters
# Summary statistics for each cluster
cluster_summary = df.groupby('Cluster')[features].mean()
print("Cluster Summary:\n", cluster_summary)

# Step 6: Visualize Clusters
plt.figure(figsize=(8, 6))
sns.scatterplot(
    x='Income', 
    y='SpendingScore', 
    hue='Cluster', 
    data=df, 
    palette='viridis', 
    s=100
)
plt.title('Customer Segmentation')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.legend(title='Cluster')
plt.show()

