import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import yfinance as yf

# Step 1: Download Stock Data
def download_stock_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

# Step 2: Feature Engineering
def add_features(data):
    data['Daily Return'] = data['Close'].pct_change()
    data['5 Day MA'] = data['Close'].rolling(window=5).mean()
    data['20 Day MA'] = data['Close'].rolling(window=20).mean()
    data['Volatility'] = data['Close'].rolling(window=5).std()
    data = data.dropna()
    return data

# Step 3: Prepare Data for Modeling
def prepare_data(data):
    features = ['Daily Return', '5 Day MA', '20 Day MA', 'Volatility']
    X = data[features]
    y = data['Close']
    return train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train and Evaluate the Model
def train_and_evaluate_model(X_train, X_test, y_train, y_test):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    print(f"Mean Squared Error: {mse}")
    return model, predictions

# Step 5: Plot Actual vs Predicted
def plot_results(y_test, predictions):
    plt.figure(figsize=(10, 6))
    plt.plot(y_test.values, label='Actual', color='blue')
    plt.plot(predictions, label='Predicted', color='red')
    plt.title('Stock Price Prediction')
    plt.legend()
    plt.show()

# Main Function
def main():
    ticker = "AAPL"  # Example: Apple Inc.
    start_date = "2020-01-01"
    end_date = "2023-01-01"

    print("Downloading data...")
    data = download_stock_data(ticker, start_date, end_date)
    
    print("Engineering features...")
    data = add_features(data)
    
    print("Preparing data...")
    X_train, X_test, y_train, y_test = prepare_data(data)
    
    print("Training model...")
    model, predictions = train_and_evaluate_model(X_train, X_test, y_train, y_test)
    
    print("Plotting results...")
    plot_results(y_test, predictions)

if __name__ == "__main__":
    main()
